FUNCTIONS:
1. SQRT (14 bytes):
"\xf2\x0f\x10\x04\x24"   // movsd   xmm0, qword [rsp]
"\x66\x0f\x51\xc0"       // sqrtpd  xmm0, xmm0
"\xf2\x0f\x11\x04\x24"   // movsd   qword [rsp], xmm0

2. ADD (24b) 
"\xf2\x0f\x10\x4c\x24\x08" // movsd   xmm1, qword [rsp + 8]
"\xf2\x0f\x10\x14\x24" // movsd   xmm2, qword [rsp]
"\x48\x83\xc4\x08" // add     rsp, 8
"\xf2\x0f\x58\xca" // addsd   xmm1, xmm2
"\xf2\x0f\x11\x0c\x24" // movsd   qword [rsp], xmm1

3. SUB (24b)

"\xf2\x0f\x10\x4c\x24\x08" // movsd   xmm1, qword [rsp + 8]
"\xf2\x0f\x10\x14\x24" // movsd   xmm2, qword [rsp]
"\x48\x83\xc4\x08" // add     rsp, 8
"\xf2\x0f\x5c\xca" // subsd   xmm1, xmm2
"\xf2\x0f\x11\x0c\x24" // movsd   qword [rsp], xmm1

4. MUL(24b)
"\xf2\x0f\x10\x4c\x24\x08" // movsd   xmm1, qword [rsp + 8]
"\xf2\x0f\x10\x14\x24"     // movsd   xmm2, qword [rsp]
"\x48\x83\xc4\x08"         // add     rsp, 8
"\xf2\x0f\x59\xca"         // mulsd   xmm1, xmm2
"\xf2\x0f\x11\x0c\x24"     // movsd   qword [rsp], xmm1

5. DIV (24b)
"\xf2\x0f\x10\x4c\x24\x08" // movsd   xmm1, qword [rsp + 8]
"\xf2\x0f\x10\x14\x24"     // movsd   xmm2, qword [rsp]
"\x48\x83\xc4\x08"         // add     rsp, 8
"\xf2\x0f\x5e\xca"         // divsd   xmm1, xmm2
"\xf2\x0f\x11\x0c\x24"     // movsd   qword [rsp], xmm1

6. POP
    6.1 POP [IMM] (8b)
        "\x5f" // pop rdi
        "\x48\x89\x3d\xf9\xff\xff\xff" // mov [0], rdi

    6.2 POP [REG] (4b)
        "\x5f" // pop rdi
        "\x48\x89\x38" // mov [rax], rdi 

        "\x48\x89\x3b" // mov [rbx], rdi 
        "\x48\x89\x39" // mov [rcx], rdi 
        "\x48\x89\x3a" // mov [rdx], rdi

    6.3 POP REG  (1b)
        "\x58" // pop rax
        
        "\x5b" // pop rbx 
        "\x59" // pop rcx 
        "\x5a" // pop rdx 
        
    6.4 POP [REG+IMM] ((4b + 4b = int) = 8b)

    "\x5f" // pop rdi 
    "\x48\x89\x8\x01" // mov [rax + 1], rdi

    "\x48\x89\x7b\x01" // mov [rbx + 1], rdi 
    "\x48\x89\x79\x01" // mov [rcx + 1], rdi
    "\x48\x89\x7a\x01" // mov [rdx + 1], rdi

7. PUSH
    7.1 IMM (8b) 
        "\x48\xc7\xc7\x01\x00\x00\x00" // mov rdi, 1
        "\x57" // push rdi
    
    7.2 REG (1b)
        "\x50" // push rax

        "\x53" // push rbx
        "\x51" // push rcx
        "\x52" // push rdx

    7.3. [IMM] (9b)
        "\x48\x8b\x3c\x25" + 4b of int // mov rdi, qword [imm]
        "\x57" // push rdi

    7.4 [REG]
        "\x48\x8b\x38" // mov rdi, qword [rax]

        "\x48\x8b\x3b" // mov rdi, qword [rbx]
        "\x48\x8b\x39" // mov rdi, qword [rcx]
        "\x48\x8b\x3a" // mov rdi, qword [rdx]

        "\x57" // push rdi

    7.5 [REG + IMM] (8b)
        "\x48\x8b\xb8" + 4b of int// mov rdi, qword [rax + imm]

        "\x48\x8b\xbb" + 4b of int// mov rdi, qword [rbx + imm]
        "\x48\x8b\xb9" + 4b of int// mov rdi, qword [rcx + imm]
        "\x48\x8b\xba" + 4b of int// mov rdi, qword [rdx + imm]

        "\x57" // push rdi

    8. RET (1b)
        "\xc3" // ret

    9. JMP (5b)
        "\xe9" + 4b of shift (cur_ip - ip_to_jmp) // jmp shift
    
    10. CALL (5b)
        "\xe8" + 4b of shift (cur_ip - ip_proc) // call shift

    11. COND JMPS
        "\x5e" // pop rsi
        "\x5f" // pop rdi
        "\x48\x39\xf7" // cmp rdi, rsi
        "\x0f\x84" + 4b of shift // je (cur_ip - ip_to_jmp)
             \x85  // jne
             \x8f  // jg
             \x8d  // jge
             \x8c  // jl
             \x8e  // jle






